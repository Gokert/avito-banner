// Code generated by MockGen. DO NOT EDIT.
// Source: session_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "avito-banner/pkg/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISessionRepo is a mock of ISessionRepo interface.
type MockISessionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepoMockRecorder
}

// MockISessionRepoMockRecorder is the mock recorder for MockISessionRepo.
type MockISessionRepoMockRecorder struct {
	mock *MockISessionRepo
}

// NewMockISessionRepo creates a new mock instance.
func NewMockISessionRepo(ctrl *gomock.Controller) *MockISessionRepo {
	mock := &MockISessionRepo{ctrl: ctrl}
	mock.recorder = &MockISessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepo) EXPECT() *MockISessionRepoMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockISessionRepo) AddSession(ctx context.Context, active models.Session) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", ctx, active)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession.
func (mr *MockISessionRepoMockRecorder) AddSession(ctx, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockISessionRepo)(nil).AddSession), ctx, active)
}

// CheckActiveSession mocks base method.
func (m *MockISessionRepo) CheckActiveSession(ctx context.Context, sid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActiveSession", ctx, sid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActiveSession indicates an expected call of CheckActiveSession.
func (mr *MockISessionRepoMockRecorder) CheckActiveSession(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActiveSession", reflect.TypeOf((*MockISessionRepo)(nil).CheckActiveSession), ctx, sid)
}

// DeleteSession mocks base method.
func (m *MockISessionRepo) DeleteSession(ctx context.Context, sid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockISessionRepoMockRecorder) DeleteSession(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockISessionRepo)(nil).DeleteSession), ctx, sid)
}

// GetUserLogin mocks base method.
func (m *MockISessionRepo) GetUserLogin(ctx context.Context, sid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLogin", ctx, sid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLogin indicates an expected call of GetUserLogin.
func (mr *MockISessionRepoMockRecorder) GetUserLogin(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLogin", reflect.TypeOf((*MockISessionRepo)(nil).GetUserLogin), ctx, sid)
}
